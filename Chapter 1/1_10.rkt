#|

(A 1 10)
	(A 0 (A 1 9))
		(A 0 ((A 0 (A 1 8))))
		...
			y = 1
			(A 0 ((A 0 (A 1 8) ... (A 1 1))))

y
1	2	4
2	4	8
3	8	16
4	16	32
...
9	512	1024
A 1024

(A 2 4)
	(A 1 (A 2 3))
	(A 1 (A 1 A(2 2)))
	(A 1 (A 1 (A 1 A(2 1)))

A 2^16 = 65536

(A 3 3)
	(A 2 (A 3 2))
	(A 2 (A 2 (A 3 1)))
	(A 2 (A 2 2))
	(A 2 (A 1 (A 2 1)))
	(A 2 (A 1 2))
	(A 2 (A 0 (A 1 1)))
	(A 2 (A 0 2))
	(A 2 4)
	(A 1 (A 2 3))
	(A 1 (A 1 (A 2 2)))
	(A 1 (A 1 (A 1 A(2 1)))))
	(A 1 (A 1 (A 1 2))))
	(A 1 (A 1 (A 0 (A 1 1)))))
	(A 1 (A 1 (A 0 2))))
	(A 1 (A 1 4))
	(A 1 (A 0 (A 1 3)))
	(A 1 (A 0 (A 0 (A 1 2))))
	(A 1 (A 0 (A 0 (A 0 (A 1 1)))))
	(A 1 (A 0 (A 0 (A 0 2))))
	(A 1 (A 0 (A 0 4)))
	(A 1 (A 0 8))
	(A 1 16)
	(A 0 (A 1 15))
	(A 0 (A 0 (A 1 14))) ... 2 ^ 16

2^16 = 65536

(define (f n) (A 0 n)) = 2n
(define (g n) (A 1 n)) = 2^n
(A 2 1) :2^1?
2
(A 2 2) :2^2?
(A 1 (A 2 1))
(A 1 2)
2^2 = 4

(define (h n) (A 2 n)) = 2^(n^n)

(A 3 3) = 2 ^ 2 ^ 2 ^ 2 = 2^16
アッカーマン関数は高さ𝑛の指数タワーを計算する


|#


#lang racket

(define (A x y)
	(cond ((= y 0) 0)		; 0
		((= x 0) (* 2 y))	; 2y
		((= y 1) 2)			; 2
		(else (A (- x 1) (A x (- y 1))))))	;(A (x-1) (A x (y-1)))

(A 1 10)
(A 2 4)
(A 3 3)
