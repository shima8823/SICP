#lang racket

; accross-countを(define accros-count 0)で定義しとけば良かったやん...

(define (make-account balance password)
	(define (withdraw amount)
		(if (>= balance amount)
			(begin (set! balance (- balance amount))
					balance)
			"Insufficient funds"))
	(define (deposit amount)
		(set! balance (+ balance amount))
		balance)
	(define (call-the-cops)
		(error "call 911..."))
	(let ((access-count 0))
		(let ((dispatch (lambda (try m)
			(if (eq? password try)
				(begin (set! access-count 0)
					(cond ((eq? m 'withdraw) withdraw)
						((eq? m 'deposit) deposit)
						(else (error "Unknown request: MAKE-ACCOUNT" m))))
				(begin (set! access-count (+ access-count 1))
					(if (>= access-count 7)
						(call-the-cops)
						(lambda (v) "Incorrect password")))))))
			dispatch)))

(define acc (make-account 100 'secret-password))
((acc 'secret-password 'withdraw) 40)
; 60
((acc 'some-other-password 'deposit) 50)
((acc 'some-other-password 'deposit) 50)
((acc 'some-other-password 'deposit) 50)
((acc 'some-other-password 'deposit) 50)
((acc 'some-other-password 'deposit) 50)
((acc 'some-other-password 'deposit) 50)
((acc 'secret-password 'deposit) 50)
((acc 'some-other-password 'deposit) 50)
((acc 'some-other-password 'deposit) 50)
; "Incorrect password"
((acc 'some-other-password 'deposit) 50)
((acc 'some-other-password 'deposit) 50)
((acc 'some-other-password 'deposit) 50)
((acc 'some-other-password 'deposit) 50)
((acc 'some-other-password 'deposit) 50)
((acc 'some-other-password 'deposit) 50)
((acc 'some-other-password 'deposit) 50)